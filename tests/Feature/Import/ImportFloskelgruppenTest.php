<?php

namespace Tests\Feature\Import;

use App\Models\Fach;
use App\Models\Floskel;
use App\Models\Floskelgruppe;
use App\Models\Jahrgang;
use App\Services\DataImportService;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class ImportFloskelgruppenTest extends TestCase
{
    use RefreshDatabase;

    public const TABLE = 'floskelgruppen';
    public const RELATED_TABLE = 'floskeln';

    private function getData(): array
    {
        return json_decode('{
            "floskelgruppen": [
                {
                    "kuerzel": "ALLG",
                    "bezeichnung": "Allgemeine Floskeln",
                    "hauptgruppe": "ALLG",
                    "floskeln": [
                        {
                            "kuerzel": "#A1",
                            "text": "Lorem ipsum",
                            "fachID": null,
                            "niveau": null,
                            "jahrgangID": null
                        }
                    ]
                }
            ]
        }', true);
    }

    /**
     * It returns when the "floskelgruppen" array is empty
     *
     * @return void
     */
    public function test_it_returns_when_the_floskelgruppen_array_is_empty(): void
    {
        $data = json_decode('{
            "floskelgruppen": []
        }', true);

        (new DataImportService($data))->execute();

        $this->assertDatabaseCount(self::TABLE, 0);
    }

    /**
     * It returns when the "floskelgruppen" array is empty
     *
     * @return void
     */
    public function test_it_returns_when_the_floskelgruppen_array_is_missing(): void
    {
        $data = json_decode('{}', true);

        new DataImportService($data);

        $this->assertDatabaseCount(self::RELATED_TABLE, 0);
    }

    /**
     * It creates "Floskelgruppe" with "Floskeln"
     *
     * @return void
     */
    public function test_it_creates_floskelgrupper_with_floskeln(): void
    {
        $data = $this->getData();
        (new DataImportService($data))->execute();

        $this->assertDatabaseCount(self::TABLE, 1)
            ->assertDatabaseHas(self::TABLE, [
                'kuerzel' => 'ALLG',
                'bezeichnung' => 'Allgemeine Floskeln',
                'hauptgruppe' => 'ALLG',
            ])
            ->assertDatabaseCount(self::RELATED_TABLE, 1)
            ->assertDatabaseHas(self::RELATED_TABLE, [
                'kuerzel' => '#A1',
                'text' => 'Lorem ipsum',
            ]);
    }

    /**
     * It does not update "Floskelgruppe"
     *
     * @return void
     */
    public function test_it_does_not_update_floskelgruppe(): void
    {
        Floskelgruppe::factory()->create([
            'kuerzel' => 'ALLG',
            'bezeichnung' => 'Floskeln für außerunterrichtliches Engagement',
        ]);

        $data = $this->getData();
        $data['floskelgruppen'][0]['kuerzel'] = 'ALLG';
        $data['floskelgruppen'][0]['bezeichnung'] = 'Allgemeine Floskeln';

        (new DataImportService($data))->execute();

        $this->assertDatabaseCount(self::TABLE, 1)
            ->assertDatabaseHas(self::TABLE, ['bezeichnung' => 'Floskeln für außerunterrichtliches Engagement'])
            ->assertDatabaseMissing(self::TABLE, ['bezeichnung' => 'Allgemeine Floskeln']);
    }

    /**
     * It does not create "Floskelgruppe" with missing "Kuerzel"
     *
     * @return void
     */
    public function test_it_does_not_create_floskelgruppe_with_missing_kuerzel(): void
    {
        $data = $this->getData();
        unset($data['floskelgruppen'][0]['kuerzel']);

        (new DataImportService($data))->execute();

        $this->assertDatabaseCount(self::TABLE, 0);
    }

    /**
     * It does not create "Floskelgruppe" with empty kuerzel
     *
     * @return void
     */
    public function test_it_does_not_create_floskelgruppe_with_empty_kuerzel(): void
    {
        $data = $this->getData();
        $data['floskelgruppen'][0]['kuerzel'] = '';

        (new DataImportService($data))->execute();

        $this->assertDatabaseCount(self::TABLE, 0);
    }

    /**
     * It does not create floskelgruppe with NULL kuerzel
     *
     * @return void
     */
    public function test_it_does_not_create_floskelgruppe_with_null_kuerzel(): void
    {
        $data = $this->getData();
        $data['floskelgruppen'][0]['kuerzel'] = null;

        (new DataImportService($data))->execute();

        $this->assertDatabaseCount(self::TABLE, 0);
    }
    /**
     * It does not create floskelgruppe with missing bezeichnung
     *
     * @return void
     */
    public function test_it_does_not_create_floskelgruppe_with_missing_bezeichnung(): void
    {
        $data = $this->getData();
        unset($data['floskelgruppen'][0]['bezeichnung']);

        (new DataImportService($data))->execute();

        $this->assertDatabaseCount(self::TABLE, 0);
    }

    /**
     * It does not create floskelgruppe with empty bezeichnung
     *
     * @return void
     */
    public function test_it_does_not_create_floskelgruppe_with_empty_bezeichnung(): void
    {
        $data = $this->getData();
        $data['floskelgruppen'][0]['bezeichnung'] = '';

        (new DataImportService($data))->execute();

        $this->assertDatabaseCount(self::TABLE, 0);
    }

    /**
     * It does not create floskelgruppe with null bezeichnung
     *
     * @return void
     */
    public function test_it_does_not_create_floskelgruppe_with_null_bezeichnung(): void
    {
        $data = $this->getData();
        $data['floskelgruppen'][0]['bezeichnung'] = null;

        (new DataImportService($data))->execute();

        $this->assertDatabaseCount(self::TABLE, 0);
    }

    /**
     * It does not create floskelgruppe with missing hauptgruppe
     *
     * @return void
     */
    public function test_it_does_not_create_floskelgruppe_with_missing_hauptgruppe(): void
    {
        $data = $this->getData();
        unset($data['floskelgruppen'][0]['hauptgruppe']);

        (new DataImportService($data))->execute();

        $this->assertDatabaseCount(self::TABLE, 0);
    }

    /**
     * It does not create floskelgruppe with empty hauptgruppe
     *
     * @return void
     */
    public function test_it_does_not_create_floskelgruppe_with_empty_hauptgruppe(): void
    {
        $data = $this->getData();
        $data['floskelgruppen'][0]['hauptgruppe'] = '';

        (new DataImportService($data))->execute();

        $this->assertDatabaseCount(self::TABLE, 0);
    }


    /**
     * It does not create floskelgruppe with NULL hauptgruppe
     *
     * @return void
     */
    public function test_it_does_not_create_floskelgruppe_with_null_hauptgruppe(): void
    {
        $data = $this->getData();
        $data['floskelgruppen'][0]['hauptgruppe'] = null;

        (new DataImportService($data))->execute();

        $this->assertDatabaseCount(self::TABLE, 0);
    }

    /**
     * It does not create floskelgruppe with missing floskeln
     *
     * @return void
     */
    public function test_it_does_not_create_floskelgruppe_with_missing_floskeln(): void
    {
        $data = $this->getData();
        unset($data['floskelgruppen'][0]['floskeln']);

        (new DataImportService($data))->execute();

        $this->assertDatabaseCount(self::TABLE, 0);
    }

    /**
     * It does not create floskelgruppe with empty floskeln
     *
     * @return void
     */
    public function test_it_does_not_create_floskelgruppe_with_empty_floskeln(): void
    {
        $data = $this->getData();
        $data['floskelgruppen'][0]['floskeln'] = [];

        (new DataImportService($data))->execute();

        $this->assertDatabaseCount(self::TABLE, 0);
    }

    /**
     * It does not create if floskeln kuerzel is missing
     *
     * @return void
     */
    public function test_it_does_not_create_if_floskel_kuerzel_is_missing(): void
    {
        $data = $this->getData();
        unset($data['floskelgruppen'][0]['floskeln'][0]['kuerzel']);
        (new DataImportService($data))->execute();

        $this->assertDatabaseCount(self::RELATED_TABLE, 0);
    }

    /**
     * It does not create if floskel kuerzel is NULL
     *
     * @return void
     */
    public function test_it_does_not_create_if_floskel_kuerzel_is_null(): void
    {
        $data = $this->getData();
        $data['floskelgruppen'][0]['floskeln'][0]['kuerzel'] = null;

        (new DataImportService($data))->execute();

        $this->assertDatabaseCount(self::RELATED_TABLE, 0);
    }

    /**
     * It does not create if floskel kuerzel is empty
     *
     * @return void
     */
    public function test_it_does_not_create_if_floskel_kuerzel_is_empty(): void
    {
        $data = $this->getData();
        $data['floskelgruppen'][0]['floskeln'][0]['kuerzel'] = '';

        (new DataImportService($data))->execute();

        $this->assertDatabaseCount(self::RELATED_TABLE, 0);
    }

    /**
     * It does not create if kuerzel already exists
     *
     * @return void
     */
    public function test_it_does_not_create_if_floskel_kuerzel_already_exists(): void
    {
        Floskel::factory()->create(['kuerzel' => '#1']);

        $data = $this->getData();
        $data['floskelgruppen'][0]['floskeln'][0]['kuerzel'] = '#1';

        (new DataImportService($data))->execute();

        $this->assertDatabaseCount(self::RELATED_TABLE, 1);
    }

    /**
     * It does not create if "Text" is missing
     *
     * @return void
     */
    public function test_it_does_not_create_if_floskel_text_is_missing(): void
    {
        $data = $this->getData();
        unset($data['floskelgruppen'][0]['floskeln'][0]['text']);
        (new DataImportService($data))->execute();

        $this->assertDatabaseCount(self::RELATED_TABLE, 0);
    }


    /**
     * It does not create if "Text" is null
     *
     * @return void
     */
    public function test_it_does_not_create_if_floskel_text_is_null(): void
    {
        $data = $this->getData();
        $data['floskelgruppen'][0]['floskeln'][0]['text'] = null;

        (new DataImportService($data))->execute();

        $this->assertDatabaseCount(self::RELATED_TABLE, 0);
    }

    /**
     * It does not create if "Text" is empty
     *
     * @return void
     */
    public function test_it_does_not_create_if_floskel_text_is_empty(): void
    {
        $data = $this->getData();
        $data['floskelgruppen'][0]['floskeln'][0]['text'] = '';

        (new DataImportService($data))->execute();

        $this->assertDatabaseCount(self::RELATED_TABLE, 0);
    }

    /**
     * It does not create if "jahrgangID" is missing
     *
     * @return void
     */
    public function test_it_does_not_create_if_floskel_jahrgang_id_is_missing(): void
    {
        $data = $this->getData();
        unset($data['floskelgruppen'][0]['floskeln'][0]['jahrgangID']);
        (new DataImportService($data))->execute();

        $this->assertDatabaseCount(self::RELATED_TABLE, 0);
    }

    /**
     * It creates if "jahrgangID" is null
     *
     * @return void
     */
    public function test_it_creates_if_floskel_jahrgang_id_is_null(): void
    {
        $data = $this->getData();
        $data['floskelgruppen'][0]['floskeln'][0]['jahrgangID'] = null;
        (new DataImportService($data))->execute();

        $this->assertDatabaseCount(self::RELATED_TABLE, 1);
    }

    /**
     * It does not create if "jahrgangID" is empty
     *
     * @return void
     */
    public function test_it_does_not_create_if_floskel_jahrgang_id_is_empty(): void
    {
        $data = $this->getData();
        $data['floskelgruppen'][0]['floskeln'][0]['jahrgangID'] = '';
        (new DataImportService($data))->execute();

        $this->assertDatabaseCount(self::RELATED_TABLE, 0);
    }


    /**
     * It does not create if "Jahrgang" does not exist
     *
     * @return void
     */
    public function test_it_does_not_create_if_floskel_jahrgang_does_not_exists(): void
    {
        Jahrgang::factory()->create(['id' => 1]);

        $data = $this->getData();
        $data['floskelgruppen'][0]['floskeln'][0]['jahrgangID'] = 2; // Different ID

        (new DataImportService($data))->execute();

        $this->assertDatabaseCount(self::RELATED_TABLE, 0);
    }


    /**
     * It does not create if "FachID" is missing
     *
     * @return void
     */
    public function test_it_does_not_create_if_floskel_fach_id_is_missing(): void
    {
        $data = $this->getData();
        unset($data['floskelgruppen'][0]['floskeln'][0]['fachID']);

        (new DataImportService($data))->execute();

        $this->assertDatabaseCount(self::RELATED_TABLE, 0);
    }

    /**
     * It creates if "FachID" is NULL
     *
     * @return void
     */
    public function test_it_creates_if_floskel_fach_id_is_null(): void
    {
        $data = $this->getData();
        $data['floskelgruppen'][0]['floskeln'][0]['fachID'] = null;
        (new DataImportService($data))->execute();

        $this->assertDatabaseCount(self::RELATED_TABLE, 1);
    }


    /**
     * It does not create if "FachID" is empty
     *
     * @return void
     */
    public function test_it_does_not_create_if_floskel_fach_id_is_empty(): void
    {
        $data = $this->getData();
        $data['floskelgruppen'][0]['floskeln'][0]['fachID'] = '';
        (new DataImportService($data))->execute();

        $this->assertDatabaseCount(self::RELATED_TABLE, 0);
    }

    /**
     * It does not create if "Fach" does not exist
     *
     * @return void
     */
    public function test_it_does_not_create_if_floskel_fach_does_not_exists(): void
    {
        Fach::factory()->create(['id' => 1]);

        $data = $this->getData();
        $data['floskelgruppen'][0]['floskeln'][0]['fachID'] = 2; // Different ID

        (new DataImportService($data))->execute();

        $this->assertDatabaseCount(self::RELATED_TABLE, 0);
    }


    /**
     * It does not create if "Niveau" is missing
     *
     * @return void
     */
    public function test_it_does_not_create_if_floskel_niveau_is_missing(): void
    {
        $data = $this->getData();
        unset($data['floskelgruppen'][0]['floskeln'][0]['niveau']);

        (new DataImportService($data))->execute();

        $this->assertDatabaseCount(self::RELATED_TABLE, 0);
    }

    /**
     * It creates if "Niveau" is null
     *
     * @return void
     */
    public function test_it_creates_if_floskel_niveau_is_null(): void
    {
        $data = $this->getData();
        $data['floskelgruppen'][0]['floskeln'][0]['niveau'] = null;
        (new DataImportService($data))->execute();

        $this->assertDatabaseCount(self::RELATED_TABLE, 1);
    }

    /**
     * It does not create if "Niveau" is empty
     *
     * @return void
     */
    public function test_it_does_not_create_if_floskel_niveau_is_empty(): void
    {
        $data = $this->getData();
        $data['floskelgruppen'][0]['floskeln'][0]['niveau'] = '';
        (new DataImportService($data))->execute();

        $this->assertDatabaseCount(self::RELATED_TABLE, 0);
    }
}
